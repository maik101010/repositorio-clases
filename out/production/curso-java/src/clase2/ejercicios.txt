Ejercicio 1: Agrupar Trabajadores por Rango Salarial

Objetivo: Agrupar las instancias de Worker por su rango salarial (por ejemplo, 0-1000, 1001-2000, etc.) utilizando un Map.
    Crea una lista de instancias de Worker.
    Utiliza streams para agrupar los trabajadores en un Map<String, List<Worker>> donde la clave sea el rango salarial y el valor sea una lista de trabajadores en ese rango.
    Imprime el mapa.

Ejercicio 2: Filtrar y Ordenar Trabajadores por Edad

Objetivo: Filtrar a los trabajadores menores de 30 años y luego ordenar a los trabajadores restantes por edad en orden descendente.
    Crea una lista de instancias de Worker.
    Utiliza streams para filtrar los trabajadores mayores de 30 años.
    Ordena los trabajadores filtrados por edad en orden descendente utilizando Comparator.
    Imprime la lista ordenada.

Ejercicio 3: Encontrar al Trabajador más Joven y al más Viejo

Objetivo: Utilizar streams para encontrar al trabajador más joven y al más viejo en una lista.
    Crea una lista de instancias de Worker.
    Utiliza Collectors.maxBy y Collectors.minBy para encontrar al trabajador más joven y al más viejo.
    Imprime los detalles del trabajador más joven y del más viejo.

Ejercicio 4: Calcular la Edad Promedio por Género

Objetivo: Calcular la edad promedio de los trabajadores agrupados por género.
    Crea una lista de instancias de Worker.
    Utiliza streams para agrupar a los trabajadores por su género (sexo).
    Calcula la edad promedio para cada género utilizando Collectors.averagingInt.
    Imprime los resultados.

Ejercicio 5: Convertir Trabajadores en un Conjunto de Nombres

Objetivo: Convertir la lista de trabajadores en un Set<String> que contenga solo sus nombres, eliminando duplicados.
    Crea una lista de instancias de Worker.
    Utiliza streams para mapear cada trabajador a su nombre y recoge los resultados en un Set<String>.
    Imprime el conjunto de nombres.